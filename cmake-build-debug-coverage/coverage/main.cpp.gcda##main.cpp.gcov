        -:    0:Source:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/project/main.cpp
        -:    0:Graph:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/cmake-build-debug-coverage/CMakeFiles/testing.dir/project/main.cpp.gcno
        -:    0:Data:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/cmake-build-debug-coverage/CMakeFiles/testing.dir/project/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by lerakry on 09.10.2020.
        -:    3://
        -:    4:
        -:    5:#include <gtest/gtest.h>
        -:    6:#include <string>
        -:    7:
        -:    8:extern "C" {
        -:    9:    #include "diet.h"
        -:   10:}
        -:   11:
        8:   12:TEST(Convertion_to_enum_classes, class_additives) {
        1:   12-block  0
        1:   12-block  1
        1:   12-block  2
    %%%%%:   12-block  3
    %%%%%:   12-block  4
    %%%%%:   12-block  5
    %%%%%:   12-block  6
    %%%%%:   12-block  7
    %%%%%:   12-block  8
        1:   12-block  9
        1:   12-block 10
        1:   12-block 11
        1:   12-block 12
        1:   12-block 13
        1:   12-block 14
        1:   12-block 15
        1:   13:    char additive1[] = "Без";
        1:   14:    char additive2[] = "Красители";
        1:   15:    EXPECT_EQ(Additives(No_additives), char_additive(additive1));
        1:   15-block  0
        1:   15-block  1
        1:   15-block  2
    $$$$$:   15-block  3
    $$$$$:   15-block  4
    $$$$$:   15-block  5
    $$$$$:   15-block  6
    $$$$$:   15-block  7
        1:   15-block  8
    %%%%%:   15-block  9
    %%%%%:   15-block 10
    %%%%%:   15-block 11
    %%%%%:   15-block 12
    %%%%%:   15-block 13
    %%%%%:   15-block 14
    %%%%%:   15-block 15
    %%%%%:   15-block 16
    %%%%%:   15-block 17
    %%%%%:   15-block 18
        1:   16:    EXPECT_EQ(Additives(Colorants), char_additive(additive2));
        1:   16-block  0
        1:   16-block  1
    $$$$$:   16-block  2
    $$$$$:   16-block  3
    $$$$$:   16-block  4
    $$$$$:   16-block  5
    $$$$$:   16-block  6
        1:   16-block  7
    %%%%%:   16-block  8
    %%%%%:   16-block  9
    %%%%%:   16-block 10
    %%%%%:   16-block 11
    %%%%%:   16-block 12
    %%%%%:   16-block 13
    %%%%%:   16-block 14
    %%%%%:   16-block 15
    %%%%%:   16-block 16
        1:   17:}
    %%%%%:   17-block  0
        -:   18:
        8:   19:TEST(Convertion_to_enum_classes, class_vitamins) {
        1:   19-block  0
        1:   19-block  1
        1:   19-block  2
    %%%%%:   19-block  3
    %%%%%:   19-block  4
    %%%%%:   19-block  5
    %%%%%:   19-block  6
    %%%%%:   19-block  7
    %%%%%:   19-block  8
        1:   19-block  9
        1:   19-block 10
        1:   19-block 11
        1:   19-block 12
        1:   19-block 13
        1:   19-block 14
        1:   19-block 15
        1:   20:    char vitamin1[] = "E";
        1:   21:    char vitamin2[] = "K";
        1:   22:    EXPECT_EQ(Vitamins(E), char_vitamin(vitamin1));
        1:   22-block  0
        1:   22-block  1
        1:   22-block  2
    $$$$$:   22-block  3
    $$$$$:   22-block  4
    $$$$$:   22-block  5
    $$$$$:   22-block  6
    $$$$$:   22-block  7
        1:   22-block  8
    %%%%%:   22-block  9
    %%%%%:   22-block 10
    %%%%%:   22-block 11
    %%%%%:   22-block 12
    %%%%%:   22-block 13
    %%%%%:   22-block 14
    %%%%%:   22-block 15
    %%%%%:   22-block 16
    %%%%%:   22-block 17
    %%%%%:   22-block 18
        1:   23:    EXPECT_EQ(Vitamins(K), char_vitamin(vitamin2));
        1:   23-block  0
        1:   23-block  1
    $$$$$:   23-block  2
    $$$$$:   23-block  3
    $$$$$:   23-block  4
    $$$$$:   23-block  5
    $$$$$:   23-block  6
        1:   23-block  7
    %%%%%:   23-block  8
    %%%%%:   23-block  9
    %%%%%:   23-block 10
    %%%%%:   23-block 11
    %%%%%:   23-block 12
    %%%%%:   23-block 13
    %%%%%:   23-block 14
    %%%%%:   23-block 15
    %%%%%:   23-block 16
        1:   24:}
    %%%%%:   24-block  0
        -:   25:
        8:   26:TEST(Convertion_to_enum_classes, class_minerals) {
        1:   26-block  0
        1:   26-block  1
        1:   26-block  2
    %%%%%:   26-block  3
    %%%%%:   26-block  4
    %%%%%:   26-block  5
    %%%%%:   26-block  6
    %%%%%:   26-block  7
    %%%%%:   26-block  8
        1:   26-block  9
        1:   26-block 10
        1:   26-block 11
        1:   26-block 12
        1:   26-block 13
        1:   26-block 14
        1:   26-block 15
        1:   27:    char mineral1[] = "Кальций";
        1:   28:    char mineral2[] = "Фосфор";
        1:   29:    EXPECT_EQ(Minerals(Calcium), char_mineral(mineral1));
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
    $$$$$:   29-block  3
    $$$$$:   29-block  4
    $$$$$:   29-block  5
    $$$$$:   29-block  6
    $$$$$:   29-block  7
        1:   29-block  8
    %%%%%:   29-block  9
    %%%%%:   29-block 10
    %%%%%:   29-block 11
    %%%%%:   29-block 12
    %%%%%:   29-block 13
    %%%%%:   29-block 14
    %%%%%:   29-block 15
    %%%%%:   29-block 16
    %%%%%:   29-block 17
    %%%%%:   29-block 18
        1:   30:    EXPECT_EQ(Minerals(Phosphorus), char_mineral(mineral2));
        1:   30-block  0
        1:   30-block  1
    $$$$$:   30-block  2
    $$$$$:   30-block  3
    $$$$$:   30-block  4
    $$$$$:   30-block  5
    $$$$$:   30-block  6
        1:   30-block  7
    %%%%%:   30-block  8
    %%%%%:   30-block  9
    %%%%%:   30-block 10
    %%%%%:   30-block 11
    %%%%%:   30-block 12
    %%%%%:   30-block 13
    %%%%%:   30-block 14
    %%%%%:   30-block 15
    %%%%%:   30-block 16
        1:   31:}
    %%%%%:   31-block  0
        -:   32:
        8:   33:TEST(Find_nessesary_param, find_wishful_additives) {
        1:   33-block  0
        1:   33-block  1
        1:   33-block  2
    %%%%%:   33-block  3
    %%%%%:   33-block  4
    %%%%%:   33-block  5
    %%%%%:   33-block  6
    %%%%%:   33-block  7
    %%%%%:   33-block  8
        1:   33-block  9
        1:   33-block 10
        1:   33-block 11
        1:   33-block 12
        1:   33-block 13
        1:   33-block 14
        1:   33-block 15
        1:   34:    Products* products = initialization();
        1:   34-block  0
        1:   35:    char additive1[] = "Антиоксиданты";
        1:   36:    char additive2[] = "Загуститель";
        1:   37:    char additive3[] = "-";
        1:   38:    EXPECT_EQ(true, find_additives(products[8], additive1));
        1:   38-block  0
        1:   38-block  1
        1:   38-block  2
    $$$$$:   38-block  3
    $$$$$:   38-block  4
    $$$$$:   38-block  5
    $$$$$:   38-block  6
    $$$$$:   38-block  7
        1:   38-block  8
    %%%%%:   38-block  9
    %%%%%:   38-block 10
    %%%%%:   38-block 11
    %%%%%:   38-block 12
    %%%%%:   38-block 13
    %%%%%:   38-block 14
    %%%%%:   38-block 15
    %%%%%:   38-block 16
    %%%%%:   38-block 17
    %%%%%:   38-block 18
        1:   39:    EXPECT_EQ(false, find_additives(products[6], additive2));
        1:   39-block  0
        1:   39-block  1
    $$$$$:   39-block  2
    $$$$$:   39-block  3
    $$$$$:   39-block  4
    $$$$$:   39-block  5
    $$$$$:   39-block  6
        1:   39-block  7
    %%%%%:   39-block  8
    %%%%%:   39-block  9
    %%%%%:   39-block 10
    %%%%%:   39-block 11
    %%%%%:   39-block 12
    %%%%%:   39-block 13
    %%%%%:   39-block 14
    %%%%%:   39-block 15
    %%%%%:   39-block 16
    %%%%%:   39-block 17
        1:   40:    EXPECT_EQ(true, find_additives(products[5], additive3));
        1:   40-block  0
        1:   40-block  1
    $$$$$:   40-block  2
    $$$$$:   40-block  3
    $$$$$:   40-block  4
    $$$$$:   40-block  5
    $$$$$:   40-block  6
        1:   40-block  7
    %%%%%:   40-block  8
    %%%%%:   40-block  9
    %%%%%:   40-block 10
    %%%%%:   40-block 11
    %%%%%:   40-block 12
    %%%%%:   40-block 13
    %%%%%:   40-block 14
    %%%%%:   40-block 15
    %%%%%:   40-block 16
        1:   41:    free(products);
        1:   42:}
    %%%%%:   42-block  0
        -:   43:
        8:   44:TEST(Find_nessesary_param, find_wishful_vitamins) {
        1:   44-block  0
        1:   44-block  1
        1:   44-block  2
    %%%%%:   44-block  3
    %%%%%:   44-block  4
    %%%%%:   44-block  5
    %%%%%:   44-block  6
    %%%%%:   44-block  7
    %%%%%:   44-block  8
        1:   44-block  9
        1:   44-block 10
        1:   44-block 11
        1:   44-block 12
        1:   44-block 13
        1:   44-block 14
        1:   44-block 15
        1:   45:    Products* products = initialization();
        1:   45-block  0
        1:   46:    char vitamin1[] = "B9";
        1:   47:    char vitamin2[] = "B7";
        1:   48:    char vitamin3[] = "-";
        1:   49:    EXPECT_EQ(false, find_vitamin(products[8], vitamin1));
        1:   49-block  0
        1:   49-block  1
        1:   49-block  2
    $$$$$:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
    $$$$$:   49-block  7
        1:   49-block  8
    %%%%%:   49-block  9
    %%%%%:   49-block 10
    %%%%%:   49-block 11
    %%%%%:   49-block 12
    %%%%%:   49-block 13
    %%%%%:   49-block 14
    %%%%%:   49-block 15
    %%%%%:   49-block 16
    %%%%%:   49-block 17
    %%%%%:   49-block 18
        1:   50:    EXPECT_EQ(true, find_vitamin(products[9], vitamin1));
        1:   50-block  0
        1:   50-block  1
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
    $$$$$:   50-block  6
        1:   50-block  7
    %%%%%:   50-block  8
    %%%%%:   50-block  9
    %%%%%:   50-block 10
    %%%%%:   50-block 11
    %%%%%:   50-block 12
    %%%%%:   50-block 13
    %%%%%:   50-block 14
    %%%%%:   50-block 15
    %%%%%:   50-block 16
    %%%%%:   50-block 17
        1:   51:    EXPECT_EQ(false, find_vitamin(products[4], vitamin2));
        1:   51-block  0
        1:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    $$$$$:   51-block  4
    $$$$$:   51-block  5
    $$$$$:   51-block  6
        1:   51-block  7
    %%%%%:   51-block  8
    %%%%%:   51-block  9
    %%%%%:   51-block 10
    %%%%%:   51-block 11
    %%%%%:   51-block 12
    %%%%%:   51-block 13
    %%%%%:   51-block 14
    %%%%%:   51-block 15
    %%%%%:   51-block 16
    %%%%%:   51-block 17
        1:   52:    EXPECT_EQ(true, find_vitamin(products[5], vitamin3));
        1:   52-block  0
        1:   52-block  1
    $$$$$:   52-block  2
    $$$$$:   52-block  3
    $$$$$:   52-block  4
    $$$$$:   52-block  5
    $$$$$:   52-block  6
        1:   52-block  7
    %%%%%:   52-block  8
    %%%%%:   52-block  9
    %%%%%:   52-block 10
    %%%%%:   52-block 11
    %%%%%:   52-block 12
    %%%%%:   52-block 13
    %%%%%:   52-block 14
    %%%%%:   52-block 15
    %%%%%:   52-block 16
        1:   53:    free(products);
        1:   54:}
    %%%%%:   54-block  0
        -:   55:
        8:   56:TEST(Find_nessesary_param, find_wishful_minerals) {
        1:   56-block  0
        1:   56-block  1
        1:   56-block  2
    %%%%%:   56-block  3
    %%%%%:   56-block  4
    %%%%%:   56-block  5
    %%%%%:   56-block  6
    %%%%%:   56-block  7
    %%%%%:   56-block  8
        1:   56-block  9
        1:   56-block 10
        1:   56-block 11
        1:   56-block 12
        1:   56-block 13
        1:   56-block 14
        1:   56-block 15
        1:   57:    Products* products = initialization();
        1:   57-block  0
        1:   58:    char mineral1[] = "Калий";
        1:   59:    char mineral2[] = "Хром";
        1:   60:    char mineral3[] = "-";
        1:   61:    EXPECT_EQ(false, find_mineral(products[8], mineral1));
        1:   61-block  0
        1:   61-block  1
        1:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
    $$$$$:   61-block  5
    $$$$$:   61-block  6
    $$$$$:   61-block  7
        1:   61-block  8
    %%%%%:   61-block  9
    %%%%%:   61-block 10
    %%%%%:   61-block 11
    %%%%%:   61-block 12
    %%%%%:   61-block 13
    %%%%%:   61-block 14
    %%%%%:   61-block 15
    %%%%%:   61-block 16
    %%%%%:   61-block 17
    %%%%%:   61-block 18
        1:   62:    EXPECT_EQ(true, find_mineral(products[1], mineral1));
        1:   62-block  0
        1:   62-block  1
    $$$$$:   62-block  2
    $$$$$:   62-block  3
    $$$$$:   62-block  4
    $$$$$:   62-block  5
    $$$$$:   62-block  6
        1:   62-block  7
    %%%%%:   62-block  8
    %%%%%:   62-block  9
    %%%%%:   62-block 10
    %%%%%:   62-block 11
    %%%%%:   62-block 12
    %%%%%:   62-block 13
    %%%%%:   62-block 14
    %%%%%:   62-block 15
    %%%%%:   62-block 16
    %%%%%:   62-block 17
        1:   63:    EXPECT_EQ(false, find_mineral(products[3], mineral2));
        1:   63-block  0
        1:   63-block  1
    $$$$$:   63-block  2
    $$$$$:   63-block  3
    $$$$$:   63-block  4
    $$$$$:   63-block  5
    $$$$$:   63-block  6
        1:   63-block  7
    %%%%%:   63-block  8
    %%%%%:   63-block  9
    %%%%%:   63-block 10
    %%%%%:   63-block 11
    %%%%%:   63-block 12
    %%%%%:   63-block 13
    %%%%%:   63-block 14
    %%%%%:   63-block 15
    %%%%%:   63-block 16
    %%%%%:   63-block 17
        1:   64:    EXPECT_EQ(true, find_mineral(products[5], mineral3));
        1:   64-block  0
        1:   64-block  1
    $$$$$:   64-block  2
    $$$$$:   64-block  3
    $$$$$:   64-block  4
    $$$$$:   64-block  5
    $$$$$:   64-block  6
        1:   64-block  7
    %%%%%:   64-block  8
    %%%%%:   64-block  9
    %%%%%:   64-block 10
    %%%%%:   64-block 11
    %%%%%:   64-block 12
    %%%%%:   64-block 13
    %%%%%:   64-block 14
    %%%%%:   64-block 15
    %%%%%:   64-block 16
        1:   65:    free(products);
        1:   66:}
    %%%%%:   66-block  0
        -:   67:
        8:   68:TEST(Calculations, proteins) {
        1:   68-block  0
        1:   68-block  1
        1:   68-block  2
    %%%%%:   68-block  3
    %%%%%:   68-block  4
    %%%%%:   68-block  5
    %%%%%:   68-block  6
    %%%%%:   68-block  7
    %%%%%:   68-block  8
        1:   68-block  9
        1:   68-block 10
        1:   68-block 11
        1:   68-block 12
        1:   68-block 13
        1:   68-block 14
        1:   68-block 15
        1:   69:    Products* products = initialization();
        1:   69-block  0
        1:   70:    int proteins1 = 0;
        1:   71:    int proteins2 = 10;
        1:   72:    EXPECT_EQ(true, right_proteins(products[10], proteins1));
        1:   72-block  0
        1:   72-block  1
    $$$$$:   72-block  2
    $$$$$:   72-block  3
    $$$$$:   72-block  4
    $$$$$:   72-block  5
    $$$$$:   72-block  6
        1:   72-block  7
    %%%%%:   72-block  8
    %%%%%:   72-block  9
    %%%%%:   72-block 10
    %%%%%:   72-block 11
    %%%%%:   72-block 12
    %%%%%:   72-block 13
    %%%%%:   72-block 14
    %%%%%:   72-block 15
    %%%%%:   72-block 16
    %%%%%:   72-block 17
        1:   73:    EXPECT_EQ(true, right_proteins(products[0], proteins2));
        1:   73-block  0
        1:   73-block  1
    $$$$$:   73-block  2
    $$$$$:   73-block  3
    $$$$$:   73-block  4
    $$$$$:   73-block  5
    $$$$$:   73-block  6
        1:   73-block  7
    %%%%%:   73-block  8
    %%%%%:   73-block  9
    %%%%%:   73-block 10
    %%%%%:   73-block 11
    %%%%%:   73-block 12
    %%%%%:   73-block 13
    %%%%%:   73-block 14
    %%%%%:   73-block 15
    %%%%%:   73-block 16
    %%%%%:   73-block 17
        1:   74:    EXPECT_EQ(true, right_proteins(products[3], proteins2));
        1:   74-block  0
        1:   74-block  1
    $$$$$:   74-block  2
    $$$$$:   74-block  3
    $$$$$:   74-block  4
    $$$$$:   74-block  5
    $$$$$:   74-block  6
        1:   74-block  7
    %%%%%:   74-block  8
    %%%%%:   74-block  9
    %%%%%:   74-block 10
    %%%%%:   74-block 11
    %%%%%:   74-block 12
    %%%%%:   74-block 13
    %%%%%:   74-block 14
    %%%%%:   74-block 15
    %%%%%:   74-block 16
    %%%%%:   74-block 17
        1:   75:    EXPECT_EQ(false, right_proteins(products[5], proteins2));
        1:   75-block  0
        1:   75-block  1
    $$$$$:   75-block  2
    $$$$$:   75-block  3
    $$$$$:   75-block  4
    $$$$$:   75-block  5
    $$$$$:   75-block  6
        1:   75-block  7
    %%%%%:   75-block  8
    %%%%%:   75-block  9
    %%%%%:   75-block 10
    %%%%%:   75-block 11
    %%%%%:   75-block 12
    %%%%%:   75-block 13
    %%%%%:   75-block 14
    %%%%%:   75-block 15
        1:   76:    free(products);
        1:   77:}
    %%%%%:   77-block  0
        -:   78:
        8:   79:TEST(Calculations, fats) {
        1:   79-block  0
        1:   79-block  1
        1:   79-block  2
    %%%%%:   79-block  3
    %%%%%:   79-block  4
    %%%%%:   79-block  5
    %%%%%:   79-block  6
    %%%%%:   79-block  7
    %%%%%:   79-block  8
        1:   79-block  9
        1:   79-block 10
        1:   79-block 11
        1:   79-block 12
        1:   79-block 13
        1:   79-block 14
        1:   79-block 15
        1:   80:    Products* products = initialization();
        1:   80-block  0
        1:   81:    int fats1 = 0;
        1:   82:    int fats2 = 16;
        1:   83:    EXPECT_EQ(true, right_fats(products[11], fats1));
        1:   83-block  0
        1:   83-block  1
    $$$$$:   83-block  2
    $$$$$:   83-block  3
    $$$$$:   83-block  4
    $$$$$:   83-block  5
    $$$$$:   83-block  6
        1:   83-block  7
    %%%%%:   83-block  8
    %%%%%:   83-block  9
    %%%%%:   83-block 10
    %%%%%:   83-block 11
    %%%%%:   83-block 12
    %%%%%:   83-block 13
    %%%%%:   83-block 14
    %%%%%:   83-block 15
    %%%%%:   83-block 16
    %%%%%:   83-block 17
        1:   84:    EXPECT_EQ(true, right_fats(products[0], fats2));
        1:   84-block  0
        1:   84-block  1
    $$$$$:   84-block  2
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
    $$$$$:   84-block  6
        1:   84-block  7
    %%%%%:   84-block  8
    %%%%%:   84-block  9
    %%%%%:   84-block 10
    %%%%%:   84-block 11
    %%%%%:   84-block 12
    %%%%%:   84-block 13
    %%%%%:   84-block 14
    %%%%%:   84-block 15
    %%%%%:   84-block 16
    %%%%%:   84-block 17
        1:   85:    EXPECT_EQ(true, right_fats(products[2], fats2));
        1:   85-block  0
        1:   85-block  1
    $$$$$:   85-block  2
    $$$$$:   85-block  3
    $$$$$:   85-block  4
    $$$$$:   85-block  5
    $$$$$:   85-block  6
        1:   85-block  7
    %%%%%:   85-block  8
    %%%%%:   85-block  9
    %%%%%:   85-block 10
    %%%%%:   85-block 11
    %%%%%:   85-block 12
    %%%%%:   85-block 13
    %%%%%:   85-block 14
    %%%%%:   85-block 15
    %%%%%:   85-block 16
    %%%%%:   85-block 17
        1:   86:    EXPECT_EQ(false, right_fats(products[5], fats2));
        1:   86-block  0
        1:   86-block  1
    $$$$$:   86-block  2
    $$$$$:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
    $$$$$:   86-block  6
        1:   86-block  7
    %%%%%:   86-block  8
    %%%%%:   86-block  9
    %%%%%:   86-block 10
    %%%%%:   86-block 11
    %%%%%:   86-block 12
    %%%%%:   86-block 13
    %%%%%:   86-block 14
    %%%%%:   86-block 15
        1:   87:    free(products);
        1:   88:}
    %%%%%:   88-block  0
        -:   89:
        8:   90:TEST(Calculations, carbohydrates) {
        1:   90-block  0
        1:   90-block  1
        1:   90-block  2
    %%%%%:   90-block  3
    %%%%%:   90-block  4
    %%%%%:   90-block  5
    %%%%%:   90-block  6
    %%%%%:   90-block  7
    %%%%%:   90-block  8
        1:   90-block  9
        1:   90-block 10
        1:   90-block 11
        1:   90-block 12
        1:   90-block 13
        1:   90-block 14
        1:   90-block 15
        1:   91:    Products* products = initialization();
        1:   91-block  0
        1:   92:    int carboh1 = 0;
        1:   93:    int carboh2 = 12;
        1:   94:    EXPECT_EQ(true, right_carbohydrates(products[5], carboh1));
        1:   94-block  0
        1:   94-block  1
    $$$$$:   94-block  2
    $$$$$:   94-block  3
    $$$$$:   94-block  4
    $$$$$:   94-block  5
    $$$$$:   94-block  6
        1:   94-block  7
    %%%%%:   94-block  8
    %%%%%:   94-block  9
    %%%%%:   94-block 10
    %%%%%:   94-block 11
    %%%%%:   94-block 12
    %%%%%:   94-block 13
    %%%%%:   94-block 14
    %%%%%:   94-block 15
    %%%%%:   94-block 16
    %%%%%:   94-block 17
        1:   95:    EXPECT_EQ(false, right_carbohydrates(products[0], carboh2));
        1:   95-block  0
        1:   95-block  1
    $$$$$:   95-block  2
    $$$$$:   95-block  3
    $$$$$:   95-block  4
    $$$$$:   95-block  5
    $$$$$:   95-block  6
        1:   95-block  7
    %%%%%:   95-block  8
    %%%%%:   95-block  9
    %%%%%:   95-block 10
    %%%%%:   95-block 11
    %%%%%:   95-block 12
    %%%%%:   95-block 13
    %%%%%:   95-block 14
    %%%%%:   95-block 15
    %%%%%:   95-block 16
    %%%%%:   95-block 17
        1:   96:    EXPECT_EQ(true, right_carbohydrates(products[2], carboh2));
        1:   96-block  0
        1:   96-block  1
    $$$$$:   96-block  2
    $$$$$:   96-block  3
    $$$$$:   96-block  4
    $$$$$:   96-block  5
    $$$$$:   96-block  6
        1:   96-block  7
    %%%%%:   96-block  8
    %%%%%:   96-block  9
    %%%%%:   96-block 10
    %%%%%:   96-block 11
    %%%%%:   96-block 12
    %%%%%:   96-block 13
    %%%%%:   96-block 14
    %%%%%:   96-block 15
    %%%%%:   96-block 16
    %%%%%:   96-block 17
        1:   97:    EXPECT_EQ(false, right_carbohydrates(products[3], carboh2));
        1:   97-block  0
        1:   97-block  1
    $$$$$:   97-block  2
    $$$$$:   97-block  3
    $$$$$:   97-block  4
    $$$$$:   97-block  5
    $$$$$:   97-block  6
        1:   97-block  7
    %%%%%:   97-block  8
    %%%%%:   97-block  9
    %%%%%:   97-block 10
    %%%%%:   97-block 11
    %%%%%:   97-block 12
    %%%%%:   97-block 13
    %%%%%:   97-block 14
    %%%%%:   97-block 15
    %%%%%:   97-block 16
    %%%%%:   97-block 17
        1:   98:    EXPECT_EQ(true, right_carbohydrates(products[6], carboh2));
        1:   98-block  0
        1:   98-block  1
    $$$$$:   98-block  2
    $$$$$:   98-block  3
    $$$$$:   98-block  4
    $$$$$:   98-block  5
    $$$$$:   98-block  6
        1:   98-block  7
    %%%%%:   98-block  8
    %%%%%:   98-block  9
    %%%%%:   98-block 10
    %%%%%:   98-block 11
    %%%%%:   98-block 12
    %%%%%:   98-block 13
    %%%%%:   98-block 14
    %%%%%:   98-block 15
        1:   99:    free(products);
        1:  100:}
    %%%%%:  100-block  0
        -:  101:
        8:  102:TEST(Calculations, calories) {
        1:  102-block  0
        1:  102-block  1
        1:  102-block  2
    %%%%%:  102-block  3
    %%%%%:  102-block  4
    %%%%%:  102-block  5
    %%%%%:  102-block  6
    %%%%%:  102-block  7
    %%%%%:  102-block  8
        1:  102-block  9
        1:  102-block 10
        1:  102-block 11
        1:  102-block 12
        1:  102-block 13
        1:  102-block 14
        1:  102-block 15
        1:  103:    Products* products = initialization();
        1:  103-block  0
        1:  104:    int min_calories1 = 0;
        1:  105:    int min_calories2 = 226;
        1:  106:    int max_calories1 = 0;
        1:  107:    int max_calories2 = 543;
        1:  108:    EXPECT_EQ(true, right_calories(products[10], min_calories1, max_calories1));
        1:  108-block  0
        1:  108-block  1
    $$$$$:  108-block  2
    $$$$$:  108-block  3
    $$$$$:  108-block  4
    $$$$$:  108-block  5
    $$$$$:  108-block  6
        1:  108-block  7
    %%%%%:  108-block  8
    %%%%%:  108-block  9
    %%%%%:  108-block 10
    %%%%%:  108-block 11
    %%%%%:  108-block 12
    %%%%%:  108-block 13
    %%%%%:  108-block 14
    %%%%%:  108-block 15
    %%%%%:  108-block 16
    %%%%%:  108-block 17
        1:  109:    EXPECT_EQ(true, right_calories(products[0], min_calories1, max_calories2));
        1:  109-block  0
        1:  109-block  1
    $$$$$:  109-block  2
    $$$$$:  109-block  3
    $$$$$:  109-block  4
    $$$$$:  109-block  5
    $$$$$:  109-block  6
        1:  109-block  7
    %%%%%:  109-block  8
    %%%%%:  109-block  9
    %%%%%:  109-block 10
    %%%%%:  109-block 11
    %%%%%:  109-block 12
    %%%%%:  109-block 13
    %%%%%:  109-block 14
    %%%%%:  109-block 15
    %%%%%:  109-block 16
    %%%%%:  109-block 17
        1:  110:    EXPECT_EQ(false, right_calories(products[2], min_calories2, max_calories2));
        1:  110-block  0
        1:  110-block  1
    $$$$$:  110-block  2
    $$$$$:  110-block  3
    $$$$$:  110-block  4
    $$$$$:  110-block  5
    $$$$$:  110-block  6
        1:  110-block  7
    %%%%%:  110-block  8
    %%%%%:  110-block  9
    %%%%%:  110-block 10
    %%%%%:  110-block 11
    %%%%%:  110-block 12
    %%%%%:  110-block 13
    %%%%%:  110-block 14
    %%%%%:  110-block 15
    %%%%%:  110-block 16
    %%%%%:  110-block 17
        1:  111:    EXPECT_EQ(true, right_calories(products[5], min_calories2, max_calories2));
        1:  111-block  0
        1:  111-block  1
    $$$$$:  111-block  2
    $$$$$:  111-block  3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
    $$$$$:  111-block  6
        1:  111-block  7
    %%%%%:  111-block  8
    %%%%%:  111-block  9
    %%%%%:  111-block 10
    %%%%%:  111-block 11
    %%%%%:  111-block 12
    %%%%%:  111-block 13
    %%%%%:  111-block 14
    %%%%%:  111-block 15
        1:  112:    free(products);
        1:  113:}
    %%%%%:  113-block  0
        -:  114:
        8:  115:TEST(Chosen_products, test_half_components) {
        1:  115-block  0
        1:  115-block  1
        1:  115-block  2
    %%%%%:  115-block  3
    %%%%%:  115-block  4
    %%%%%:  115-block  5
    %%%%%:  115-block  6
    %%%%%:  115-block  7
    %%%%%:  115-block  8
        1:  115-block  9
        1:  115-block 10
        1:  115-block 11
        1:  115-block 12
        1:  115-block 13
        1:  115-block 14
        1:  115-block 15
        1:  116:    char additive[] = "-";
        1:  117:    char vitamin[] = "-";
        1:  118:    char mineral[] = "-";
        -:  119:
        1:  120:    int proteins1 = 13;
        1:  121:    int fats1 = 24;
        1:  122:    int carbohydrates1 = 30;
        1:  123:    int min_calories1 = 200;
        1:  124:    int max_calories1 = 400;
        -:  125:
        1:  126:    char* print_product = (char*)malloc(sizeof(char) * 500);
        1:  127:    EXPECT_STREQ("Блины с кремом", search_products(proteins1, fats1, carbohydrates1,
        1:  127-block  0
        1:  127-block  1
        1:  127-block  2
    $$$$$:  127-block  3
    $$$$$:  127-block  4
    $$$$$:  127-block  5
    $$$$$:  127-block  6
    $$$$$:  127-block  7
        1:  127-block  8
    %%%%%:  127-block  9
    %%%%%:  127-block 10
    %%%%%:  127-block 11
    %%%%%:  127-block 12
    %%%%%:  127-block 13
    %%%%%:  127-block 14
        -:  128:                                                                              min_calories1, max_calories1, additive, vitamin, mineral, print_product));
        1:  129:    free(print_product);
        -:  130:
        1:  131:    int proteins2 = 15;
        1:  132:    int fats2 = 17;
        1:  133:    int carbohydrates2 = 20;
        1:  134:    int min_calories2 = 0;
        1:  135:    int max_calories2 = 317;
        -:  136:
        1:  137:    char* print_product1 = (char*)malloc(sizeof(char) * 500);
        1:  138:    EXPECT_STREQ("Кофе, Омлет, Овсяная каша", search_products(proteins2, fats2, carbohydrates2,
        1:  138-block  0
        1:  138-block  1
    $$$$$:  138-block  2
    $$$$$:  138-block  3
    $$$$$:  138-block  4
    $$$$$:  138-block  5
    $$$$$:  138-block  6
        1:  138-block  7
    %%%%%:  138-block  8
    %%%%%:  138-block  9
    %%%%%:  138-block 10
    %%%%%:  138-block 11
    %%%%%:  138-block 12
    %%%%%:  138-block 13
        -:  139:                                                   min_calories2, max_calories2, additive, vitamin, mineral, print_product1));
        1:  140:    free(print_product1);
        1:  141:}
        -:  142:
        8:  143:TEST(Chosen_products, test_secondHalf_comp) {
        1:  143-block  0
        1:  143-block  1
        1:  143-block  2
    %%%%%:  143-block  3
    %%%%%:  143-block  4
    %%%%%:  143-block  5
    %%%%%:  143-block  6
    %%%%%:  143-block  7
    %%%%%:  143-block  8
        1:  143-block  9
        1:  143-block 10
        1:  143-block 11
        1:  143-block 12
        1:  143-block 13
        1:  143-block 14
        1:  143-block 15
        1:  144:    int proteins = 0;
        1:  145:    int fats = 0;
        1:  146:    int carbohydrates = 0;
        1:  147:    int min_calories = 80;
        1:  148:    int max_calories = 0;
        -:  149:
        1:  150:    char additive1[] = "Без";
        1:  151:    char vitamin1[] = "E";
        1:  152:    char mineral1[] = "Кальций";
        -:  153:
        1:  154:    char* print_product = (char*)malloc(sizeof(char) * 500);
        1:  155:    EXPECT_STREQ("Банан",search_products(proteins, fats, carbohydrates, min_calories, max_calories, additive1, vitamin1, mineral1, print_product));
        1:  155-block  0
        1:  155-block  1
        1:  155-block  2
    $$$$$:  155-block  3
    $$$$$:  155-block  4
    $$$$$:  155-block  5
    $$$$$:  155-block  6
    $$$$$:  155-block  7
        1:  155-block  8
    %%%%%:  155-block  9
    %%%%%:  155-block 10
    %%%%%:  155-block 11
    %%%%%:  155-block 12
    %%%%%:  155-block 13
    %%%%%:  155-block 14
        1:  156:    free(print_product);
        -:  157:
        1:  158:    char additive2[] = "Стабилизаторы";
        1:  159:    char vitamin2[] = "B9";
        1:  160:    char mineral2[] = "Железо";
        -:  161:
        1:  162:    char* print_product1 = (char*)malloc(sizeof(char) * 500);
        1:  163:    EXPECT_STREQ("",search_products(proteins, fats, carbohydrates, min_calories,
        1:  163-block  0
        1:  163-block  1
    $$$$$:  163-block  2
    $$$$$:  163-block  3
    $$$$$:  163-block  4
    $$$$$:  163-block  5
    $$$$$:  163-block  6
        1:  163-block  7
    %%%%%:  163-block  8
    %%%%%:  163-block  9
    %%%%%:  163-block 10
    %%%%%:  163-block 11
    %%%%%:  163-block 12
    %%%%%:  163-block 13
        -:  164:                                                                                      max_calories, additive2, vitamin2, mineral2, print_product1));
        1:  165:    free(print_product1);
        1:  166:}
        -:  167:
        8:  168:TEST(Chosen_products, test_all_components) {
        1:  168-block  0
        1:  168-block  1
        1:  168-block  2
    %%%%%:  168-block  3
    %%%%%:  168-block  4
    %%%%%:  168-block  5
    %%%%%:  168-block  6
    %%%%%:  168-block  7
    %%%%%:  168-block  8
        1:  168-block  9
        1:  168-block 10
        1:  168-block 11
        1:  168-block 12
        1:  168-block 13
        1:  168-block 14
        1:  168-block 15
        1:  169:    int proteins1 = 0;
        1:  170:    int fats1 = 20;
        1:  171:    int carbohydrates1 = 35;
        1:  172:    int min_calories1 = 236;
        1:  173:    int max_calories1 = 499;
        1:  174:    char additive1[] = "-";
        1:  175:    char vitamin1[] = "B3";
        1:  176:    char mineral1[] = "-";
        -:  177:
        1:  178:    char* print_product1 = (char*)malloc(sizeof(char) * 500);
        1:  179:    EXPECT_STREQ("Сэндвич с рыбой",search_products(proteins1, fats1, carbohydrates1, min_calories1, max_calories1, additive1, vitamin1, mineral1, print_product1));
        1:  179-block  0
        1:  179-block  1
        1:  179-block  2
    $$$$$:  179-block  3
    $$$$$:  179-block  4
    $$$$$:  179-block  5
    $$$$$:  179-block  6
    $$$$$:  179-block  7
        1:  179-block  8
    %%%%%:  179-block  9
    %%%%%:  179-block 10
    %%%%%:  179-block 11
    %%%%%:  179-block 12
    %%%%%:  179-block 13
    %%%%%:  179-block 14
        1:  180:    free(print_product1);
        -:  181:
        1:  182:    int proteins2 = 20;
        1:  183:    int fats2 = 25;
        1:  184:    int carbohydrates2 = 40;
        1:  185:    int min_calories2 = 200;
        1:  186:    int max_calories2 = 400;
        1:  187:    char additive2[] = "Антиоксиданты";
        1:  188:    char vitamin2[] = "B6";
        1:  189:    char mineral2[] = "Натрий";
        -:  190:
        1:  191:    char* print_product2 = (char*)malloc(sizeof(char) * 500);
        1:  192:    EXPECT_STREQ("Круассан",search_products(proteins2, fats2, carbohydrates2, min_calories2, max_calories2, additive2, vitamin2, mineral2, print_product2));
        1:  192-block  0
        1:  192-block  1
    $$$$$:  192-block  2
    $$$$$:  192-block  3
    $$$$$:  192-block  4
    $$$$$:  192-block  5
    $$$$$:  192-block  6
        1:  192-block  7
    %%%%%:  192-block  8
    %%%%%:  192-block  9
    %%%%%:  192-block 10
    %%%%%:  192-block 11
    %%%%%:  192-block 12
    %%%%%:  192-block 13
        1:  193:    free(print_product2);
        -:  194:
        1:  195:    int proteins3 = 24;
        1:  196:    int fats3 = 0;
        1:  197:    int carbohydrates3 = 0;
        1:  198:    int min_calories3 = 0;
        1:  199:    int max_calories3 = 400;
        1:  200:    char additive3[] = "Без";
        1:  201:    char vitamin3[] = "B6";
        1:  202:    char mineral3[] = "-";
        -:  203:
        1:  204:    char* print_product3 = (char*)malloc(sizeof(char) * 500);
        1:  205:    EXPECT_STREQ("Кофе",search_products(proteins3, fats3, carbohydrates3, min_calories3, max_calories3, additive3, vitamin3, mineral3, print_product3));
        1:  205-block  0
        1:  205-block  1
    $$$$$:  205-block  2
    $$$$$:  205-block  3
    $$$$$:  205-block  4
    $$$$$:  205-block  5
    $$$$$:  205-block  6
        1:  205-block  7
    %%%%%:  205-block  8
    %%%%%:  205-block  9
    %%%%%:  205-block 10
    %%%%%:  205-block 11
    %%%%%:  205-block 12
    %%%%%:  205-block 13
        1:  206:    free(print_product3);
        -:  207:
        1:  208:    int proteins4 = 30;
        1:  209:    int fats4 = 30;
        1:  210:    int carbohydrates4 = 50;
        1:  211:    int min_calories4 = 220;
        1:  212:    int max_calories4 = 551;
        1:  213:    char additive4[] = "-";
        1:  214:    char vitamin4[] = "B3";
        1:  215:    char mineral4[] = "Цинк";
        -:  216:
        1:  217:    char* print_product4 = (char*)malloc(sizeof(char) * 500);
        1:  218:    EXPECT_STREQ("Сосиски",search_products(proteins4, fats4, carbohydrates4, min_calories4, max_calories4, additive4, vitamin4, mineral4, print_product4));
        1:  218-block  0
        1:  218-block  1
    $$$$$:  218-block  2
    $$$$$:  218-block  3
    $$$$$:  218-block  4
    $$$$$:  218-block  5
    $$$$$:  218-block  6
        1:  218-block  7
    %%%%%:  218-block  8
    %%%%%:  218-block  9
    %%%%%:  218-block 10
    %%%%%:  218-block 11
    %%%%%:  218-block 12
    %%%%%:  218-block 13
        1:  219:    free(print_product4);
        1:  220:}
        -:  221:
        8:  222:TEST(Correct_input, test_calories) {
        1:  222-block  0
        1:  222-block  1
        1:  222-block  2
    %%%%%:  222-block  3
    %%%%%:  222-block  4
    %%%%%:  222-block  5
    %%%%%:  222-block  6
    %%%%%:  222-block  7
        1:  222-block  8
        1:  222-block  9
        1:  222-block 10
        1:  222-block 11
        1:  222-block 12
        1:  222-block 13
        1:  222-block 14
        1:  223:    int min_calories1 = 0;
        1:  224:    int min_calories2 = 547;
        1:  225:    int min_calories3 = 80;
        1:  226:    int max_calories1 = 0;
        1:  227:    int max_calories2 = 642;
        1:  228:    int max_calories3 = 100;
        -:  229:
        1:  230:    EXPECT_EQ(true, correct_calories(min_calories1, max_calories1));
        1:  230-block  0
        1:  230-block  1
        1:  230-block  2
    $$$$$:  230-block  3
    $$$$$:  230-block  4
    $$$$$:  230-block  5
    $$$$$:  230-block  6
    $$$$$:  230-block  7
        1:  230-block  8
    %%%%%:  230-block  9
    %%%%%:  230-block 10
    %%%%%:  230-block 11
    %%%%%:  230-block 12
    %%%%%:  230-block 13
    %%%%%:  230-block 14
    %%%%%:  230-block 15
    %%%%%:  230-block 16
    %%%%%:  230-block 17
    %%%%%:  230-block 18
        1:  231:    EXPECT_EQ(false, correct_calories(min_calories2, max_calories3));
        1:  231-block  0
        1:  231-block  1
    $$$$$:  231-block  2
    $$$$$:  231-block  3
    $$$$$:  231-block  4
    $$$$$:  231-block  5
    $$$$$:  231-block  6
        1:  231-block  7
    %%%%%:  231-block  8
    %%%%%:  231-block  9
    %%%%%:  231-block 10
    %%%%%:  231-block 11
    %%%%%:  231-block 12
    %%%%%:  231-block 13
    %%%%%:  231-block 14
    %%%%%:  231-block 15
    %%%%%:  231-block 16
    %%%%%:  231-block 17
        1:  232:    EXPECT_EQ(true, correct_calories(min_calories3, max_calories2));
        1:  232-block  0
        1:  232-block  1
    $$$$$:  232-block  2
    $$$$$:  232-block  3
    $$$$$:  232-block  4
    $$$$$:  232-block  5
    $$$$$:  232-block  6
        1:  232-block  7
    %%%%%:  232-block  8
    %%%%%:  232-block  9
    %%%%%:  232-block 10
    %%%%%:  232-block 11
    %%%%%:  232-block 12
    %%%%%:  232-block 13
    %%%%%:  232-block 14
    %%%%%:  232-block 15
    %%%%%:  232-block 16
    %%%%%:  232-block 17
        1:  233:    EXPECT_EQ(true, correct_calories(min_calories3, max_calories1));
        1:  233-block  0
        1:  233-block  1
    $$$$$:  233-block  2
    $$$$$:  233-block  3
    $$$$$:  233-block  4
    $$$$$:  233-block  5
    $$$$$:  233-block  6
        1:  233-block  7
    %%%%%:  233-block  8
    %%%%%:  233-block  9
    %%%%%:  233-block 10
    %%%%%:  233-block 11
    %%%%%:  233-block 12
    %%%%%:  233-block 13
    %%%%%:  233-block 14
    %%%%%:  233-block 15
        1:  234:}
    %%%%%:  234-block  0
        -:  235:
        1:  236:int main(int argc, char **argv) {
        1:  236-block  0
        1:  237:    testing::InitGoogleTest(&argc, argv);
        1:  237-block  0
        1:  238:    return RUN_ALL_TESTS();
        4:  239:}
        1:  239-block  0
        1:  239-block  1
        1:  239-block  2
        1:  239-block  3
        1:  239-block  4
        1:  239-block  5
        -:  240:
