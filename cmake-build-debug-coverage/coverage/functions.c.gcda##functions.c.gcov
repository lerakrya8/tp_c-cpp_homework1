        -:    0:Source:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/project/functions.c
        -:    0:Graph:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/cmake-build-debug-coverage/CMakeFiles/testing.dir/project/functions.c.gcno
        -:    0:Data:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/cmake-build-debug-coverage/CMakeFiles/testing.dir/project/functions.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by lerakry on 11.10.2020.
        -:    3://
        -:    4:
        -:    5:#include "diet.h"
        -:    6:#include <string.h>
        -:    7:
        -:    8:const Products banana = {2, 1, 21, 96, No_additives, E, K, Calcium,  Phosphorus, "Банан"};
        -:    9:const Products coffee = {0, 0, 0, 0, No_additives, B3, B6, Potassium, Magnesium, "Кофе"};
        -:   10:const Products omelet = {10, 15, 2, 184, No_additives, B1, D, Ferrum, Iodine, "Омлет"};
        -:   11:const Products pan_cream = {7, 13, 17, 218, Colorants, B6, B9, Calcium, Magnesium, "Блины с кремом"};
        -:   12:const Products oatmeal = {3, 1, 12, 67, No_additives, E, B3, Calcium, Sodium, "Овсяная каша"};
        -:   13:const Products bf_tost = {14, 17, 24, 299, Antioxidants, A, B3, Sodium, Chlorine,
        -:   14:                          "Сэндвич с рыбой"};
        -:   15:const Products ae_tost = {10, 10, 9, 150, Stabilizers, A, B5, Sodium, Phosphorus,
        -:   16:                          "Тост с авокадо"};
        -:   17:const Products pb_tost = {16, 16, 35, 303, Preservatives, B5, E, Ferrum, Copper,
        -:   18:                          "Тост с арах. пастой"};
        -:   19:const Products a_croissant = {9, 23, 38, 380, Antioxidants, A, B6, Sodium, Ferrum,
        -:   20:                              "Круассан"};
        -:   21:const Products nm_muesli = {9, 17, 68, 460, Colorants, E,  B9, Copper, Zink,
        -:   22:                            "Мюсли с молоком"};
        -:   23:const Products bar_corny = {6, 15, 66, 424, Preservatives, A, B9, Copper,
        -:   24:                            Iodine, "Батончик Corny"};
        -:   25:const Products sauseges = {11, 24, 2, 266, Stabilizers, B3, E, Zink, Phosphorus,
        -:   26:                           "Сосиски"};
        -:   27:const Products cheesecakes = {19, 4, 19, 183, No_additives, B2, B3, Phosphorus, Ferrum, "Сырники"};
        -:   28:
        -:   29:
       15:   30:Products *initialization() {
       15:   30-block  0
       15:   31:    Products *types = (Products*)malloc(sizeof(Products) * 13);
        -:   32:
       15:   33:    types[0] = banana;
       15:   34:    types[1] = coffee;
       15:   35:    types[2] = omelet;
       15:   36:    types[3] = pan_cream;
       15:   37:    types[4] = oatmeal;
       15:   38:    types[5] = bf_tost;
       15:   39:    types[6] = ae_tost;
       15:   40:    types[7] = pb_tost;
       15:   41:    types[8] = a_croissant;
       15:   42:    types[9] = nm_muesli;
       15:   43:    types[10] = bar_corny;
       15:   44:    types[11] = sauseges;
       15:   45:    types[12] = cheesecakes;
        -:   46:
       15:   47:    return types;
       15:   47-block  0
        -:   48:}
        -:   49:
      109:   50:enum Additives char_additive(char* additive) {
      109:   50-block  0
      109:   51:    if ( strcmp(additive, "Без") == 0 ) {
      109:   51-block  0
       27:   52:        return No_additives;
       27:   52-block  0
        -:   53:    }
       82:   54:    if ( strcmp(additive, "Красители") == 0 ) {
       82:   54-block  0
        1:   55:        return Colorants;
        1:   55-block  0
        -:   56:    }
       81:   57:    if ( strcmp(additive, "Консерванты") == 0 ) {
       81:   57-block  0
    #####:   58:        return Preservatives;
    $$$$$:   58-block  0
        -:   59:    }
       81:   60:    if ( strcmp(additive, "Стабилизаторы") == 0 ) {
       81:   60-block  0
       13:   61:        return Stabilizers;
       13:   61-block  0
        -:   62:    }
       68:   63:    if ( strcmp(additive, "Антиоксиданты") == 0 ) {
       68:   63-block  0
       14:   64:        return Antioxidants;
       14:   64-block  0
        -:   65:    }
       54:   66:}
       54:   66-block  0
        -:   67:
      105:   68:enum Vitamins char_vitamin(char* vitamin) {
      105:   68-block  0
      105:   69:    if ( strcmp(vitamin, "A") == 0 ) {
      105:   69-block  0
    #####:   70:        return A;
    $$$$$:   70-block  0
        -:   71:    }
      105:   72:    if ( strcmp(vitamin, "B1") == 0 ) {
      105:   72-block  0
    #####:   73:        return B1;
    $$$$$:   73-block  0
        -:   74:    }
      105:   75:    if ( strcmp(vitamin, "B2") == 0 ) {
      105:   75-block  0
    #####:   76:        return B2;
    $$$$$:   76-block  0
        -:   77:    }
      105:   78:    if ( strcmp(vitamin, "B3") == 0 ) {
      105:   78-block  0
       27:   79:        return B3;
       27:   79-block  0
        -:   80:    }
       78:   81:    if ( strcmp(vitamin, "B5") == 0 ) {
       78:   81-block  0
    #####:   82:        return B5;
    $$$$$:   82-block  0
        -:   83:    }
       78:   84:    if ( strcmp(vitamin, "B6") == 0 ) {
       78:   84-block  0
       14:   85:        return B6;
       14:   85-block  0
        -:   86:    }
       64:   87:    if ( strcmp(vitamin, "B9") == 0 ) {
       64:   87-block  0
        4:   88:        return B9;
        4:   88-block  0
        -:   89:    }
       60:   90:    if ( strcmp(vitamin, "D") == 0 ) {
       60:   90-block  0
    #####:   91:        return D;
    $$$$$:   91-block  0
        -:   92:    }
       60:   93:    if ( strcmp(vitamin, "E") == 0 ) {
       60:   93-block  0
        3:   94:        return E;
        3:   94-block  0
        -:   95:    }
       57:   96:    if ( strcmp(vitamin, "K") == 0 ) {
       57:   96-block  0
        1:   97:        return K;
        1:   97-block  0
        -:   98:    }
       56:   99:}
       56:   99-block  0
        -:  100:
      136:  101:enum Minerals char_mineral(char* mineral) {
      136:  101-block  0
      136:  102:    if ( strcmp(mineral, "Магний") == 0 ) {
      136:  102-block  0
    #####:  103:        return Magnesium;
    $$$$$:  103-block  0
        -:  104:    }
      136:  105:    if ( strcmp(mineral, "Фосфор") == 0 ) {
      136:  105-block  0
        1:  106:        return Phosphorus;
        1:  106-block  0
        -:  107:    }
      135:  108:    if ( strcmp(mineral, "Медь") == 0 ) {
      135:  108-block  0
    #####:  109:        return Copper;
    $$$$$:  109-block  0
        -:  110:    }
      135:  111:    if ( strcmp(mineral, "Хлор") == 0 ) {
      135:  111-block  0
    #####:  112:        return Chlorine;
    $$$$$:  112-block  0
        -:  113:    }
      135:  114:    if ( strcmp(mineral, "Кальций") == 0 ) {
      135:  114-block  0
        9:  115:        return Calcium;
        9:  115-block  0
        -:  116:    }
      126:  117:    if ( strcmp(mineral, "Натрий") == 0 ) {
      126:  117-block  0
        2:  118:        return Sodium;
        2:  118-block  0
        -:  119:    }
      124:  120:    if ( strcmp(mineral, "Цинк") == 0 ) {
      124:  120-block  0
       25:  121:        return Zink;
       25:  121-block  0
        -:  122:    }
       99:  123:    if ( strcmp(mineral, "Железо") == 0 ) {
       99:  123-block  0
        4:  124:        return Ferrum;
        4:  124-block  0
        -:  125:    }
       95:  126:    if ( strcmp(mineral, "Калий") == 0 ) {
       95:  126-block  0
        3:  127:        return Potassium;
        3:  127-block  0
        -:  128:    }
       92:  129:    if ( strcmp(mineral, "Йод") == 0 ) {
       92:  129-block  0
    #####:  130:        return Iodine;
    $$$$$:  130-block  0
        -:  131:    }
       92:  132:}
       92:  132-block  0
        -:  133:
        4:  134:bool correct_calories(int min_calories, int max_calories) {
        4:  134-block  0
        4:  135:    if ( min_calories == 0 && max_calories == 0 ) {
        4:  135-block  0
        1:  135-block  1
        1:  136:        return true;
        1:  136-block  0
        -:  137:    }
        3:  138:    if ( min_calories == 0 && max_calories != 0 ) {
        3:  138-block  0
    $$$$$:  138-block  1
    #####:  139:        return true;
    $$$$$:  139-block  0
        -:  140:    }
        3:  141:    if ( min_calories !=0 && max_calories == 0 ) {
        3:  141-block  0
        3:  141-block  1
        1:  142:        return true;
        1:  142-block  0
        -:  143:    }
        2:  144:    if ( min_calories <= max_calories ) {
        2:  144-block  0
        1:  145:        return true;
        1:  145-block  0
        -:  146:    }
        1:  147:    return false;
        1:  147-block  0
        -:  148:}
        -:  149:
      107:  150:bool find_additives(Products product, char* additive) {
      107:  150-block  0
      107:  151:    if ( product.additive == char_additive(additive) || strcmp(additive, "-") == 0 ) {
      107:  151-block  0
       92:  151-block  1
       68:  152:        return true;
       68:  152-block  0
        -:  153:    }
       39:  154:    return false;
       39:  154-block  0
        -:  155:}
        -:  156:
       54:  157:bool find_vitamin(Products product, char* vitamin) {
       54:  157-block  0
      103:  158:    if ( product.vitamin1 == char_vitamin(vitamin) ||
       54:  158-block  0
       92:  159:         product.vitamin2 == char_vitamin(vitamin) ||
       49:  159-block  0
       43:  159-block  1
       43:  160:         strcmp(vitamin, "-") == 0 ) {
       38:  161:        return true;
       38:  161-block  0
        -:  162:    }
       16:  163:    return false;
       16:  163-block  0
        -:  164:}
        -:  165:
       70:  166:bool find_mineral(Products product, char* mineral) {
       70:  166-block  0
      134:  167:    if ( product.mineral1 == char_mineral(mineral) ||
       70:  167-block  0
      127:  168:         product.mineral2 == char_mineral(mineral) ||
       64:  168-block  0
       63:  168-block  1
       63:  169:         strcmp(mineral, "-") == 0 ) {
       52:  170:        return true;
       52:  170-block  0
        -:  171:    }
       18:  172:    return false;
       18:  172-block  0
        -:  173:}
        -:  174:
       13:  175:bool right_proteins(Products product, int proteins) {
       13:  175-block  0
       13:  176:    if ( proteins == 0 ) {
       13:  176-block  0
        3:  177:        return true;
        3:  177-block  0
        -:  178:    }
       10:  179:    if ( product.proteins <= proteins ) {
       10:  179-block  0
        9:  180:        return true;
        9:  180-block  0
        -:  181:    }
        1:  182:    return false;
        1:  182-block  0
        -:  183:}
        -:  184:
       13:  185:bool right_fats(Products product, int fats) {
       13:  185-block  0
       13:  186:    if ( fats == 0 ) {
       13:  186-block  0
        3:  187:        return true;
        3:  187-block  0
        -:  188:    }
       10:  189:    if ( product.fats <= fats ) {
       10:  189-block  0
        9:  190:        return true;
        9:  190-block  0
        -:  191:    }
        1:  192:    return false;
        1:  192-block  0
        -:  193:}
        -:  194:
       15:  195:bool right_carbohydrates(Products product, int carbohydrates) {
       15:  195-block  0
       15:  196:    if ( carbohydrates == 0 ) {
       15:  196-block  0
        3:  197:        return true;
        3:  197-block  0
        -:  198:    }
       12:  199:    if ( product.carbohydrates <= carbohydrates ) {
       12:  199-block  0
        9:  200:        return true;
        9:  200-block  0
        -:  201:    }
        3:  202:    return false;
        3:  202-block  0
        -:  203:}
        -:  204:
       40:  205:bool right_calories(Products product, int min_calories, int max_calories) {
       40:  205-block  0
       40:  206:    if ( max_calories == 0 && min_calories == 0 ) {
       40:  206-block  0
        2:  206-block  1
        1:  207:        return true;
        1:  207-block  0
        -:  208:    }
        -:  209:
       39:  210:    if ( max_calories ==0 && min_calories != 0 ) {
       39:  210-block  0
        1:  210-block  1
        1:  211:        return product.calories >= min_calories;
        1:  211-block  0
        -:  212:    }
       38:  213:    if ( product.calories >= min_calories && product.calories <= max_calories ) {
       38:  213-block  0
       27:  213-block  1
       11:  214:        return true;
       11:  214-block  0
        -:  215:    }
       27:  216:    return false;
       27:  216-block  0
        -:  217:}
        -:  218:
        8:  219:char* search_products(int proteins, int fats,
        8:  219-block  0
        -:  220:                      int carbohydrates, int min_calories, int max_calories,
        -:  221:                      char* additive, char* vitamin, char* mineral, char* result_string) {
        8:  222:    Products* types = initialization();
        8:  222-block  0
        -:  223:
      112:  224:    for ( int i = 0; i < 13; ++i ) {
      104:  224-block  0
      112:  224-block  1
      104:  225:        if ( !find_additives(types[i], additive) ) {
      104:  225-block  0
       38:  226:            continue;
       38:  226-block  0
        -:  227:        }
       66:  228:        if ( !find_mineral(types[i], mineral) ) {
       66:  228-block  0
       16:  229:            continue;
       16:  229-block  0
        -:  230:        }
       50:  231:        if ( !find_vitamin(types[i], vitamin) ) {
       50:  231-block  0
       14:  232:            continue;
       14:  232-block  0
        -:  233:        }
       46:  234:        if ( right_calories(types[i], min_calories, max_calories) &&
       36:  234-block  0
       19:  235:              right_carbohydrates(types[i], carbohydrates) &&
       10:  235-block  0
       18:  236:              right_fats(types[i], fats) && right_proteins(types[i], proteins)  ) {
        9:  236-block  0
        9:  236-block  1
        9:  237:            proteins -= types[i].proteins;
        9:  238:            fats -= types[i].fats;
        9:  239:            carbohydrates -= types[i].carbohydrates;
        9:  240:            max_calories -= types[i].calories;
        9:  241:            strncat(result_string, types[i].name, strlen(types[i].name));
        9:  242:            strncat(result_string, ", ", 2);
        9:  242-block  0
        -:  243:        }
        -:  244:    }
        -:  245:
        8:  246:    free(types);
        -:  247:
        8:  248:    int len = strlen(result_string);
        8:  249:    result_string[len - 2] = '\0';
        -:  250:
        8:  251:    return result_string;
        8:  251-block  0
        -:  252:}
        -:  253:
