        -:    0:Source:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/DZ2/tests/test.cpp
        -:    0:Graph:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/DZ2/cmake-build-debug-coverage/CMakeFiles/testing.dir/tests/test.cpp.gcno
        -:    0:Data:/home/lerakry/github_tp_c_cpp_h1/tp_c-cpp_homework1/DZ2/cmake-build-debug-coverage/CMakeFiles/testing.dir/tests/test.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by lerakry on 24.10.2020.
        -:    3://
        -:    4:#include <gtest/gtest.h>
        -:    5:#include <string>
        -:    6:#include <sys/mman.h>
        -:    7:
        -:    8:extern "C" {
        -:    9:    #include "utils_parall.h"
        -:   10:#include "utils_synch.h"
        -:   11:}
        -:   12:
        6:   13:TEST(Read_file, compare_matrix_4x4) {
        1:   13-block  0
    %%%%%:   13-block  1
    %%%%%:   13-block  2
    %%%%%:   13-block  3
        1:   13-block  4
        1:   13-block  5
    $$$$$:   13-block  6
    $$$$$:   13-block  7
        1:   13-block  8
        1:   14:    FILE* file = get_file("example4x4", "r");
        1:   14-block  0
        1:   15:    if ( file == nullptr ) {
        1:   16:        return;
    $$$$$:   16-block  0
        1:   16-block  1
        -:   17:    }
        1:   18:    Matrix* matrix = get_matrix(file);
        1:   18-block  0
        1:   19:    if ( matrix == nullptr ) {
        -:   20:        free(matrix);
        -:   21:        return;
        -:   22:    }
        1:   23:    int rows = 4, columns = 4;
        1:   24:    double correct_matrix[4][4] = {{60.457, 48.932, 88.998, 2.494},
        -:   25:                                   {94.694, 93.433, 61.753, 98.591},
        -:   26:                                   {78.065, 31.204, 89.86, 13.212},
        -:   27:                                   {63.912, 95.502, 78.58, 11.642}};
        -:   28:
        1:   29:    EXPECT_EQ(matrix->rows, rows);
    $$$$$:   29-block  0
    $$$$$:   29-block  1
    $$$$$:   29-block  2
    $$$$$:   29-block  3
    %%%%%:   29-block  4
        1:   30:    EXPECT_EQ(matrix->columns, columns);
    $$$$$:   30-block  0
    $$$$$:   30-block  1
    $$$$$:   30-block  2
    $$$$$:   30-block  3
    %%%%%:   30-block  4
        2:   31:    EXPECT_EQ(true, right_matrix(matrix->matrix, rows, columns, &correct_matrix[0][0]));
    $$$$$:   31-block  0
    $$$$$:   31-block  1
    $$$$$:   31-block  2
    $$$$$:   31-block  3
    %%%%%:   31-block  4
        1:   32:    free_memory(matrix);
        -:   33:}
        6:   34:TEST(Read_file, compare_matrix_5x6) {
        1:   34-block  0
        1:   34-block  1
    %%%%%:   34-block  2
    %%%%%:   34-block  3
    %%%%%:   34-block  4
        1:   34-block  5
        1:   34-block  6
    $$$$$:   34-block  7
    $$$$$:   34-block  8
        1:   34-block  9
        1:   35:    Matrix* matrix = get_matrix(get_file("example5x6", "r"));
        1:   35-block  0
        1:   36:    if ( matrix == nullptr ) {
        1:   37:        return;
    $$$$$:   37-block  0
        1:   37-block  1
        -:   38:    }
        1:   39:    int rows = 5, columns = 6;
        1:   40:    double correct_matrix[5][6] = {{46.091, 10.541, 10.282, 91.8, 30.378, 14.011},
        -:   41:                                   {40.977, 95.069, 91.679, 0.097, 29.083, 40.42},
        -:   42:                                   {96.958, 41.468, 29.643, 95.517, 90.43, 47.856},
        -:   43:                                   {14.899, 54.983, 79.64, 38.718, 69.662, 84.932},
        -:   44:                                   {79.696, 59.116, 82.478, 44.332, 1.795, 62.534}};
        -:   45:
        1:   46:    EXPECT_EQ(matrix->rows, rows);
    $$$$$:   46-block  0
    $$$$$:   46-block  1
    $$$$$:   46-block  2
    $$$$$:   46-block  3
    %%%%%:   46-block  4
        1:   47:    EXPECT_EQ(matrix->columns, columns);
    $$$$$:   47-block  0
    $$$$$:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
    %%%%%:   47-block  4
        2:   48:    EXPECT_EQ(true, right_matrix(matrix->matrix, rows, columns, &correct_matrix[0][0]));
    $$$$$:   48-block  0
    $$$$$:   48-block  1
    $$$$$:   48-block  2
    $$$$$:   48-block  3
    %%%%%:   48-block  4
        1:   49:    free_memory(matrix);
        -:   50:}
        -:   51:
        6:   52:TEST(Read_file,non_existent_file) {
        1:   52-block  0
        1:   52-block  1
    %%%%%:   52-block  2
    %%%%%:   52-block  3
    %%%%%:   52-block  4
        1:   52-block  5
        1:   52-block  6
    $$$$$:   52-block  7
    $$$$$:   52-block  8
        1:   52-block  9
        2:   53:    EXPECT_EQ(nullptr, get_matrix(get_file("no_file", "r")));
        1:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
    $$$$$:   53-block  3
    $$$$$:   53-block  4
    %%%%%:   53-block  5
        2:   54:    EXPECT_EQ(nullptr, get_matrix(get_file("leralera", "r")));
    $$$$$:   54-block  0
    $$$$$:   54-block  1
    $$$$$:   54-block  2
    $$$$$:   54-block  3
    %%%%%:   54-block  4
        1:   55:}
        -:   56:
        6:   57:TEST(Compare_matrix, matrix_1x5) {
        1:   57-block  0
        1:   57-block  1
    %%%%%:   57-block  2
    %%%%%:   57-block  3
    %%%%%:   57-block  4
        1:   57-block  5
        1:   57-block  6
    $$$$$:   57-block  7
    $$$$$:   57-block  8
        1:   57-block  9
        1:   58:    Matrix* a = get_matrix(get_file("matrix1x5", "r"));
        1:   58-block  0
        1:   59:    if ( a == nullptr ) {
        -:   60:        return;
        -:   61:    }
    #####:   62:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:   63:    if ( b1 == nullptr ) {
    $$$$$:   63-block  0
        -:   64:        return;
        -:   65:    }
        -:   66:
    #####:   67:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:   67-block  0
        -:   68:
    #####:   69:    b1 = transposition(a, b1);
    #####:   70:    b2 = split_process(a, b2);
        -:   71:
    #####:   72:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:   72-block  0
    $$$$$:   72-block  1
    $$$$$:   72-block  2
    $$$$$:   72-block  3
    %%%%%:   72-block  4
        -:   73:
    #####:   74:    munmap(b2, a->rows);
    #####:   75:    free_memory(a);
        1:   76:    free(b1);
        1:   76-block  0
        -:   77:}
        -:   78:
        6:   79:TEST(Compare_matrix, matrix_3x4) {
        1:   79-block  0
        1:   79-block  1
    %%%%%:   79-block  2
    %%%%%:   79-block  3
    %%%%%:   79-block  4
        1:   79-block  5
        1:   79-block  6
    $$$$$:   79-block  7
    $$$$$:   79-block  8
        1:   79-block  9
        1:   80:    Matrix* a = get_matrix(get_file("matrix3x4", "r"));
        1:   80-block  0
        1:   81:    if ( a == nullptr ) {
        -:   82:        return;
        -:   83:    }
    #####:   84:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:   85:    if ( b1 == nullptr ) {
    $$$$$:   85-block  0
        -:   86:        return;
        -:   87:    }
        -:   88:
    #####:   89:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:   89-block  0
        -:   90:
    #####:   91:    b1 = transposition(a, b1);
    #####:   92:    b2 = split_process(a, b2);
        -:   93:
        -:   94:
    #####:   95:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:   95-block  0
    $$$$$:   95-block  1
    $$$$$:   95-block  2
    $$$$$:   95-block  3
    %%%%%:   95-block  4
        -:   96:
    #####:   97:    munmap(b2, a->rows);
    #####:   98:    free_memory(a);
        1:   99:    free(b1);
        1:   99-block  0
        -:  100:}
        -:  101:
        6:  102:TEST(Compare_matrix, matrix_8x7) {
        1:  102-block  0
        1:  102-block  1
    %%%%%:  102-block  2
    %%%%%:  102-block  3
    %%%%%:  102-block  4
        1:  102-block  5
        1:  102-block  6
    $$$$$:  102-block  7
    $$$$$:  102-block  8
        1:  102-block  9
        1:  103:    Matrix* a = get_matrix(get_file("matrix8x7", "r"));
        1:  103-block  0
        1:  104:    if ( a == nullptr ) {
        -:  105:        return;
        -:  106:    }
    #####:  107:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:  108:    if ( b1 == nullptr ) {
    $$$$$:  108-block  0
        -:  109:        return;
        -:  110:    }
        -:  111:
    #####:  112:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:  112-block  0
        -:  113:
    #####:  114:    b1 = transposition(a, b1);
    #####:  115:    b2 = split_process(a, b2);
        -:  116:
        -:  117:
    #####:  118:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:  118-block  0
    $$$$$:  118-block  1
    $$$$$:  118-block  2
    $$$$$:  118-block  3
    %%%%%:  118-block  4
        -:  119:
    #####:  120:    munmap(b2, a->rows);
    #####:  121:    free_memory(a);
        1:  122:    free(b1);
        1:  122-block  0
        -:  123:}
        -:  124:
        6:  125:TEST(Compare_matrix, matrix_20x30) {
        1:  125-block  0
        1:  125-block  1
    %%%%%:  125-block  2
    %%%%%:  125-block  3
    %%%%%:  125-block  4
        1:  125-block  5
        1:  125-block  6
    $$$$$:  125-block  7
    $$$$$:  125-block  8
        1:  125-block  9
        1:  126:    Matrix* a = get_matrix(get_file("matrix20x30", "r"));
        1:  126-block  0
        1:  127:    if ( a == nullptr ) {
        -:  128:        return;
        -:  129:    }
    #####:  130:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:  131:    if ( b1 == nullptr ) {
    $$$$$:  131-block  0
        -:  132:        return;
        -:  133:    }
        -:  134:
    #####:  135:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:  135-block  0
        -:  136:
    #####:  137:    b1 = transposition(a, b1);
    #####:  138:    b2 = split_process(a, b2);
        -:  139:
        -:  140:
    #####:  141:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:  141-block  0
    $$$$$:  141-block  1
    $$$$$:  141-block  2
    $$$$$:  141-block  3
    %%%%%:  141-block  4
        -:  142:
    #####:  143:    munmap(b2, a->rows);
    #####:  144:    free_memory(a);
        1:  145:    free(b1);
        1:  145-block  0
        -:  146:}
        -:  147:
        6:  148:TEST(Compare_matrix, matrix_100x100) {
        1:  148-block  0
        1:  148-block  1
    %%%%%:  148-block  2
    %%%%%:  148-block  3
    %%%%%:  148-block  4
        1:  148-block  5
        1:  148-block  6
    $$$$$:  148-block  7
    $$$$$:  148-block  8
        1:  148-block  9
        1:  149:    Matrix* a = get_matrix(get_file("matrix100x100", "r"));
        1:  149-block  0
        1:  150:    if ( a == nullptr ) {
        -:  151:        return;
        -:  152:    }
    #####:  153:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:  154:    if ( b1 == nullptr ) {
    $$$$$:  154-block  0
        -:  155:        return;
        -:  156:    }
        -:  157:
    #####:  158:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:  158-block  0
        -:  159:
    #####:  160:    b1 = transposition(a, b1);
    #####:  161:    b2 = split_process(a, b2);
        -:  162:
        -:  163:
    #####:  164:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:  164-block  0
    $$$$$:  164-block  1
    $$$$$:  164-block  2
    $$$$$:  164-block  3
    %%%%%:  164-block  4
        -:  165:
    #####:  166:    munmap(b2, a->rows);
    #####:  167:    free_memory(a);
        1:  168:    free(b1);
        1:  168-block  0
        -:  169:}
        -:  170:
        6:  171:TEST(Compare_matrix, matrix_500x600) {
        1:  171-block  0
        1:  171-block  1
    %%%%%:  171-block  2
    %%%%%:  171-block  3
    %%%%%:  171-block  4
        1:  171-block  5
        1:  171-block  6
    $$$$$:  171-block  7
    $$$$$:  171-block  8
        1:  171-block  9
        1:  172:    Matrix* a = get_matrix(get_file("matrix500x600", "r"));
        1:  172-block  0
        1:  173:    if ( a == nullptr ) {
        -:  174:        return;
        -:  175:    }
    #####:  176:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:  177:    if ( b1 == nullptr ) {
    $$$$$:  177-block  0
        -:  178:        return;
        -:  179:    }
        -:  180:
    #####:  181:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:  181-block  0
        -:  182:
    #####:  183:    b1 = transposition(a, b1);
    #####:  184:    b2 = split_process(a, b2);
        -:  185:
        -:  186:
    #####:  187:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:  187-block  0
    $$$$$:  187-block  1
    $$$$$:  187-block  2
    $$$$$:  187-block  3
    %%%%%:  187-block  4
        -:  188:
    #####:  189:    munmap(b2, a->rows);
    #####:  190:    free_memory(a);
        1:  191:    free(b1);
        1:  191-block  0
        -:  192:}
        -:  193:
        6:  194:TEST(Compare_matrix, matrix_1000x2000) {
        1:  194-block  0
        1:  194-block  1
    %%%%%:  194-block  2
    %%%%%:  194-block  3
    %%%%%:  194-block  4
        1:  194-block  5
        1:  194-block  6
    $$$$$:  194-block  7
    $$$$$:  194-block  8
        1:  194-block  9
        1:  195:    Matrix* a = get_matrix(get_file("matrix1000x2000", "r"));
        1:  195-block  0
        1:  196:    if ( a == nullptr ) {
        -:  197:        return;
        -:  198:    }
    #####:  199:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:  200:    if ( b1 == nullptr ) {
    $$$$$:  200-block  0
        -:  201:        return;
        -:  202:    }
        -:  203:
    #####:  204:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:  204-block  0
        -:  205:
    #####:  206:    b1 = transposition(a, b1);
    #####:  207:    b2 = split_process(a, b2);
        -:  208:
        -:  209:
    #####:  210:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:  210-block  0
    $$$$$:  210-block  1
    $$$$$:  210-block  2
    $$$$$:  210-block  3
    %%%%%:  210-block  4
        -:  211:
    #####:  212:    munmap(b2, a->rows);
    #####:  213:    free_memory(a);
        1:  214:    free(b1);
        1:  214-block  0
        -:  215:}
        -:  216:
        7:  217:TEST(Compare_matrix, matrix_10000x5000) {
        1:  217-block  0
        1:  217-block  1
        1:  217-block  2
    %%%%%:  217-block  3
    %%%%%:  217-block  4
        1:  217-block  5
        1:  217-block  6
    $$$$$:  217-block  7
    $$$$$:  217-block  8
        1:  217-block  9
        1:  218:    Matrix* a = get_matrix(get_file("matrix10000x5000", "r"));
        1:  218-block  0
        1:  219:    if ( a == nullptr ) {
        -:  220:        return;
        -:  221:    }
    #####:  222:    auto* b1 = (double*)malloc((a->columns * a->rows) * sizeof(double));
    #####:  223:    if ( b1 == nullptr ) {
    $$$$$:  223-block  0
        -:  224:        return;
        -:  225:    }
        -:  226:
    #####:  227:    double* b2 = shared_memory(a->rows, a->columns);
    $$$$$:  227-block  0
        -:  228:
    #####:  229:    b1 = transposition(a, b1);
    #####:  230:    b2 = split_process(a, b2);
        -:  231:
        -:  232:
    #####:  233:    EXPECT_EQ(true, correct_transposition(b1, b2, a->columns * a->rows));
    $$$$$:  233-block  0
    $$$$$:  233-block  1
    $$$$$:  233-block  2
    $$$$$:  233-block  3
    %%%%%:  233-block  4
        -:  234:
    #####:  235:    munmap(b2, a->rows);
    #####:  236:    free_memory(a);
        1:  237:    free(b1);
        1:  237-block  0
        -:  238:}
        -:  239:
        1:  240:int main(int argc, char **argv) {
        1:  240-block  0
        1:  241:    testing::InitGoogleTest(&argc, argv);
        1:  241-block  0
        -:  242:    return RUN_ALL_TESTS();
        4:  243:}
        1:  243-block  0
        1:  243-block  1
        1:  243-block  2
        1:  243-block  3
        1:  243-block  4
        1:  243-block  5
        -:  244:
        -:  245:
